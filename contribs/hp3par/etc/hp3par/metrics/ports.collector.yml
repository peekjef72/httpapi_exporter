#*********************************************************************************
# documentation from HP site:
# https://support.hpe.com/hpesc/public/docDisplay?docId=c03606339
# p 254 /ports
# p 264 /portdevices
# p 518 portstatistics
#*********************************************************************************

collector_name: ports_statistics
# no cache
# min_interval: 0s
# use global metric_prefix
# metric_prefix: ""

templates:
  # modeType: >-
  #   {{- $modeDef := dict "1" "suspended" "2" "target" "3" "initiator" "4" "peer" }}
  #   {{ $mode := . | toString }}
  #   {{ pluck $mode $modeDef | first | default "undef" -}}

  portType: '
    {{- $portTypeDef := dict 
        "1" "HOST" 
        "2" "disk"
        "3" "FREE"
        "4" "IPORT"
        "5" "RCFC"
        "6" "PEER"
        "7" "RCIP"
        "8" "ISCSI"
        "9" "CNA"
        "10" "FS"}}
    {{ $portType := . | toString }}
    {{ pluck $portType $portTypeDef | first | default "undef" -}}'

  protocolType: >-
    {{- $protocolDef := dict "1" "FC" "2" "iSCSI" "3" "FCOE" "4" "IP" -}}
    {{- $protocol := . | toString -}}
    {{- pluck $protocol $protocolDef | first | default "undef" -}}

jscode:
  - type: module
    name: val2code
    file: ./js/mod_val2code.js
  - type: code
    file: ./js/val2code.js
  - type: code
    source: >-
      function test(code) {
      }

scripts:
  get port_status:
  #**************************************************************************************************
  #* ports status
  #* 200 OK
  #* result example:
    # "members":[
    #   { 
    #     "portPos":{
    #       "node":0,
    #       "slot":0,
    #       "cardPort":1
    #     },
    #     "mode":2,
    #     "linkState":4,
    #     "nodeWWN": "2FF70002AC022B2B",
    #     "portWWN": "20010002AC022B2B",
    #     "type": 1, 
    #     "protocol":1,
    #     "partnerPos": {
    #       "node": 1, 
    #       "slot": 0, 
    #       "cardPort": 1
    #     },
    #     "failoverState":1,
    #     "device":
    #       [ "wdaesx001", "wdaesx003", "wdaesx005", "wdaesx101","wdaesx007"]
    #   },
    #   ...
    - name: query port_status
      query:
        url: /ports
        # debug: yes
        var_name: results

    - name: proceed ports config elements
      loop: $results.members
      when:
        # don't collect unconfigure/unplug ports (free port)
        - 'js: item.type != 3'

      actions:
        - name: build labels
          set_fact:
            key_labels:
              source: >
                js: 
                  "Node-" + exporter.default( item.portPos.node, "undef" ) +
                  "/Port-" + exporter.default( item.portPos.slot, "undef" ) +
                  "/Card-" + exporter.default( item.portPos.cardPort, "undef" )
            # source: Node-{{ .item.portPos.node | default "undef" | toString }}/Port-{{ .item.portPos.slot | default "undef" | toString }}/Card-{{ .item.portPos.cardPort | default "undef" | toString }}
            # target: Node-{{ .item.partnerPos.node | default "undef" | toString }}/Port-{{ .item.partnerPos.slot | default "undef" | toString}}/Card-{{ .item.partnerPos.cardPort | default "undef" | toString }}
            # label: '{{ .item.label | default "undef" }}'
            # mode: '{{ template "modeType" .item.mode }}'
              target: >
                js: 
                  "Node-" + exporter.default( item.partnerPos.node, "undef" ) +
                  "/Port-" + exporter.default( item.partnerPos.slot, "undef" ) +
                  "/Card-" + exporter.default( item.partnerPos.cardPort, "undef" )
              label: 'js: exporter.default( item.label, "undef" )'
              mode: >-
                js:
                  var ret = "undef"
                  switch( item.mode ) {
                    case 1:
                    case "1":
                      ret = "suspended"
                      break
                    case 2:
                    case "2":
                      ret = "target"
                      break
                    case 3:
                    case "3":
                      ret = "initiator"
                      break
                    case 4:
                    case "4":
                      ret = "peer"
                      break
                  }
                  ret
            porttype: '{{ template "portType" .item.type }}'
            protocol: '{{ template "protocolType" .item.protocol }}'

        - name: build metrics port_status
          scope: none
          metrics:
            - metric_name: port_status
              help: "port state by node slot port: 1:CONFIG_WAIT - 2:ALPA_WAIT - 3:LOGIN_WAIT - 4:READY - 5:LOSS_SYNC - 6:ERROR_STATE - 7:XXX - 8:NONPARTICIPATE - 9:COREDUMP - 10:OFFLINE"
              type: gauge
              key_labels: $key_labels
              values: 
                _: $item.linkState

            - metric_name: port_failover_state
              help: "port failover state by node slot port: 1:NONE - 2:FAILOVER_PENDINF - 3:FAILED_OVER - 4:ACTIVE - 5:ACTIVE_DOWN - 6:ACTIVE_FAILED - 7:FAILBACK_PENDING"
              type: gauge
              key_labels: $key_labels
              values: 
                _: 'js: exporter.default( item.failoverState, 1)'

    # ports statistics
    # {
    #   "sampleTime": "2022-11-16T07:25:00+01:00",
    #   "sampleTimeSec": 1668579900,
    #   "total": 18,
    #   "members": [
    #     {
    #       "node": 0,
    #       "slot": 0,
    #       "cardPort": 1,
    #       "type": 1, 
    #       "speed": 16,
    #       "IO": {
    #         "read": 5.4, 
    #         "write": 7.3,
    #         "total": 12.7
    #       },
    #       "KBytes": {
    #         "read": 26.7,
    #         "write": 11.0,
    #         "total": 37.7
    #       },
    #       "serviceTimeMS": {
    #         "read": 0.08,
    #         "write": 2.1,
    #         "total": 1.24
    #       },
    #       "IOSizeKB": {
    #         "read": 4.9,
    #         "write": 1.5,
    #         "total": 3.0
    #       },
    #       "queueLength": 0,
    #       "busyPct": 0.7
    #     },
    #     {"node":0,"slot":0,... }
    #   ]
    # }
  get port_stats:
    - name: query port_stats
      query:
        url: /systemreporter/attime/portstatistics/hires
        # debug: yes
        var_name: results

    - name: proceed port_stats elements
      loop: $results.members
      when:
        - ne .item.type 3.0
      actions:
        - name: build labels
          set_fact:
            key_labels:
              source: >
                js: 
                  "Node-" + exporter.default( item.node, "undef" ) +
                  "/Port-" + exporter.default( item.slot, "undef" ) +
                  "/Card-" + exporter.default( item.cardPort, "undef" )
              # source: Node-{{ .item.node | default "undef" | toString }}/Port-{{ .item.slot | default "undef" | toString }}/Card-{{ .item.cardPort | default "undef" | toString }}
              porttype: '{{ template "portType" .item.type }}'
              # porttype: '{{ $portTypeDef := dict "1" "HOST" "2" "disk" "3" "FREE" "4" "IPORT" "5" "RCFC" "6" "PEER" "7" "RCIP" "8" "ISCSI" "9" "CNA" "10" "FS"}}{{ $portType := .type | toString }}{{ pluck $portType $portTypeDef | first | default "undef" }}'

        - name: build metrics
          scope: none
          metrics:
            # read and write io per second
            - metric_name: port_read_io_per_second
              help: Number of IO read operations per second.
              type: gauge
              key_labels: $key_labels
              values:
                _: $item.IO.read

            - metric_name: port_write_io_per_second
              help: Number of IO write operations per second.
              type: gauge
              key_labels: $key_labels
              values:
                _: $item.IO.write

            # read and write bytes per seconds
            - metric_name: port_read_bytes_per_second
              help: Number of kilobytes per second.
              type: gauge
              key_labels: $key_labels
              values:
                _: 'js: exporter.convertToBytes( item.KBytes.read, "Kb" )'

            - metric_name: port_write_bytes_per_second
              help: Number of kilobytes per second.
              type: gauge
              key_labels: $key_labels
              values:
                _: 'js: exporter.convertToBytes( item.KBytes.write, "Kb" )'

            # read and write latency Service Time
            - metric_name: port_read_latency_second
              help: Number of kilobytes per second.
              type: gauge
              key_labels: $key_labels
              values:
                _: 'js: item.serviceTimeMS.read * 1E-3'

            - metric_name: port_write_latency_second
              help: Write service time in millisecond statistic data.
              type: gauge
              key_labels: $key_labels
              values:
                _: 'js: item.serviceTimeMS.write * 1E-3'

            # busy percent
            - metric_name: port_busy_percent
              help: Busy percentage.
              type: gauge
              key_labels: $key_labels
              values:
                _: $item.busyPct
